"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.driver = exports.getScreenshotsUploadUrls = exports.getVideoUploadUrl = void 0;

var _md = _interopRequireDefault(require("md5"));

var _results = require("../lib/results");

var _s = require("./s3");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const getScreenshotUploadInstruction = namespace => async screenshot => {
  const key = (0, _md.default)(`${namespace}:${screenshot.screenshotId}`);
  return { ...(await (0, _s.getImageUploadUrl)(key)),
    screenshotId: screenshot.screenshotId
  };
};

const getVideoUploadUrl = async (instanceId, result) => {
  if (!result.cypressConfig.video) {
    return null;
  }

  if (!(0, _results.isInstanceFailed)(result) && !result.cypressConfig.videoUploadOnPasses) {
    return null;
  }

  return await (0, _s.getVideoUploadUrl)(instanceId);
};

exports.getVideoUploadUrl = getVideoUploadUrl;

const getScreenshotsUploadUrls = async (instanceId, result) => {
  if (result.screenshots.length === 0) {
    return [];
  }

  return Promise.all(result.screenshots.map(getScreenshotUploadInstruction(instanceId)));
};

exports.getScreenshotsUploadUrls = getScreenshotsUploadUrls;
const driver = {
  id: 's3',
  init: () => Promise.resolve(),
  getScreenshotsUploadUrls,
  getVideoUploadUrl
};
exports.driver = driver;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JlZW5zaG90cy9zMy5kcml2ZXIudHMiXSwibmFtZXMiOlsiZ2V0U2NyZWVuc2hvdFVwbG9hZEluc3RydWN0aW9uIiwibmFtZXNwYWNlIiwic2NyZWVuc2hvdCIsImtleSIsInNjcmVlbnNob3RJZCIsImdldFZpZGVvVXBsb2FkVXJsIiwiaW5zdGFuY2VJZCIsInJlc3VsdCIsImN5cHJlc3NDb25maWciLCJ2aWRlbyIsInZpZGVvVXBsb2FkT25QYXNzZXMiLCJnZXRTY3JlZW5zaG90c1VwbG9hZFVybHMiLCJzY3JlZW5zaG90cyIsImxlbmd0aCIsIlByb21pc2UiLCJhbGwiLCJtYXAiLCJkcml2ZXIiLCJpZCIsImluaXQiLCJyZXNvbHZlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBU0E7O0FBQ0E7Ozs7QUFLQSxNQUFNQSw4QkFBOEIsR0FBSUMsU0FBRCxJQUF1QixNQUM1REMsVUFENEQsSUFFbkI7QUFDekMsUUFBTUMsR0FBRyxHQUFHLGlCQUFLLEdBQUVGLFNBQVUsSUFBR0MsVUFBVSxDQUFDRSxZQUFhLEVBQTVDLENBQVo7QUFDQSxTQUFPLEVBQ0wsSUFBSSxNQUFNLDBCQUFrQkQsR0FBbEIsQ0FBVixDQURLO0FBRUxDLElBQUFBLFlBQVksRUFBRUYsVUFBVSxDQUFDRTtBQUZwQixHQUFQO0FBSUQsQ0FSRDs7QUFVTyxNQUFNQyxpQkFBaUIsR0FBRyxPQUMvQkMsVUFEK0IsRUFFL0JDLE1BRitCLEtBR1k7QUFDM0MsTUFBSSxDQUFDQSxNQUFNLENBQUNDLGFBQVAsQ0FBcUJDLEtBQTFCLEVBQWlDO0FBQy9CLFdBQU8sSUFBUDtBQUNEOztBQUNELE1BQUksQ0FBQywrQkFBaUJGLE1BQWpCLENBQUQsSUFBNkIsQ0FBQ0EsTUFBTSxDQUFDQyxhQUFQLENBQXFCRSxtQkFBdkQsRUFBNEU7QUFDMUUsV0FBTyxJQUFQO0FBQ0Q7O0FBQ0QsU0FBTyxNQUFNLDBCQUFvQkosVUFBcEIsQ0FBYjtBQUNELENBWE07Ozs7QUFhQSxNQUFNSyx3QkFBd0IsR0FBRyxPQUN0Q0wsVUFEc0MsRUFFdENDLE1BRnNDLEtBR0s7QUFDM0MsTUFBSUEsTUFBTSxDQUFDSyxXQUFQLENBQW1CQyxNQUFuQixLQUE4QixDQUFsQyxFQUFxQztBQUNuQyxXQUFPLEVBQVA7QUFDRDs7QUFFRCxTQUFPQyxPQUFPLENBQUNDLEdBQVIsQ0FDTFIsTUFBTSxDQUFDSyxXQUFQLENBQW1CSSxHQUFuQixDQUF1QmhCLDhCQUE4QixDQUFDTSxVQUFELENBQXJELENBREssQ0FBUDtBQUdELENBWE07OztBQWFBLE1BQU1XLE1BQXlCLEdBQUc7QUFDdkNDLEVBQUFBLEVBQUUsRUFBRSxJQURtQztBQUV2Q0MsRUFBQUEsSUFBSSxFQUFFLE1BQU1MLE9BQU8sQ0FBQ00sT0FBUixFQUYyQjtBQUd2Q1QsRUFBQUEsd0JBSHVDO0FBSXZDTixFQUFBQTtBQUp1QyxDQUFsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtZDUgZnJvbSAnbWQ1JztcbmltcG9ydCB7XG4gIFNjcmVlbnNob3RzRHJpdmVyLFxuICBJbnN0YW5jZVJlc3VsdCxcbiAgU2NyZWVuc2hvdFVwbG9hZEluc3RydWN0aW9uLFxuICBTY3JlZW5zaG90LFxuICBBc3NldFVwbG9hZEluc3RydWN0aW9uXG59IGZyb20gJ0BzcmMvdHlwZXMnO1xuXG5pbXBvcnQgeyBpc0luc3RhbmNlRmFpbGVkIH0gZnJvbSAnQHNyYy9saWIvcmVzdWx0cyc7XG5pbXBvcnQge1xuICBnZXRJbWFnZVVwbG9hZFVybCxcbiAgZ2V0VmlkZW9VcGxvYWRVcmwgYXMgczNnZXRWaWRlb1VwbG9hZFVybFxufSBmcm9tICcuL3MzJztcblxuY29uc3QgZ2V0U2NyZWVuc2hvdFVwbG9hZEluc3RydWN0aW9uID0gKG5hbWVzcGFjZTogc3RyaW5nKSA9PiBhc3luYyAoXG4gIHNjcmVlbnNob3Q6IFNjcmVlbnNob3Rcbik6IFByb21pc2U8U2NyZWVuc2hvdFVwbG9hZEluc3RydWN0aW9uPiA9PiB7XG4gIGNvbnN0IGtleSA9IG1kNShgJHtuYW1lc3BhY2V9OiR7c2NyZWVuc2hvdC5zY3JlZW5zaG90SWR9YCk7XG4gIHJldHVybiB7XG4gICAgLi4uKGF3YWl0IGdldEltYWdlVXBsb2FkVXJsKGtleSkpLFxuICAgIHNjcmVlbnNob3RJZDogc2NyZWVuc2hvdC5zY3JlZW5zaG90SWRcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRWaWRlb1VwbG9hZFVybCA9IGFzeW5jIChcbiAgaW5zdGFuY2VJZDogc3RyaW5nLFxuICByZXN1bHQ6IEluc3RhbmNlUmVzdWx0XG4pOiBQcm9taXNlPEFzc2V0VXBsb2FkSW5zdHJ1Y3Rpb24gfCBudWxsPiA9PiB7XG4gIGlmICghcmVzdWx0LmN5cHJlc3NDb25maWcudmlkZW8pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAoIWlzSW5zdGFuY2VGYWlsZWQocmVzdWx0KSAmJiAhcmVzdWx0LmN5cHJlc3NDb25maWcudmlkZW9VcGxvYWRPblBhc3Nlcykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBhd2FpdCBzM2dldFZpZGVvVXBsb2FkVXJsKGluc3RhbmNlSWQpO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFNjcmVlbnNob3RzVXBsb2FkVXJscyA9IGFzeW5jIChcbiAgaW5zdGFuY2VJZDogc3RyaW5nLFxuICByZXN1bHQ6IEluc3RhbmNlUmVzdWx0XG4pOiBQcm9taXNlPFNjcmVlbnNob3RVcGxvYWRJbnN0cnVjdGlvbltdPiA9PiB7XG4gIGlmIChyZXN1bHQuc2NyZWVuc2hvdHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgcmV0dXJuIFByb21pc2UuYWxsKFxuICAgIHJlc3VsdC5zY3JlZW5zaG90cy5tYXAoZ2V0U2NyZWVuc2hvdFVwbG9hZEluc3RydWN0aW9uKGluc3RhbmNlSWQpKVxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IGRyaXZlcjogU2NyZWVuc2hvdHNEcml2ZXIgPSB7XG4gIGlkOiAnczMnLFxuICBpbml0OiAoKSA9PiBQcm9taXNlLnJlc29sdmUoKSxcbiAgZ2V0U2NyZWVuc2hvdHNVcGxvYWRVcmxzLFxuICBnZXRWaWRlb1VwbG9hZFVybFxufTtcbiJdfQ==