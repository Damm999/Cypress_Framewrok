"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getNextTask = exports.createRun = exports.getById = void 0;

var _run = require("./run.model");

var _instance = require("../instances/instance.controller");

var _urls = require("../../../lib/urls");

var _errors = require("../../../lib/errors");

var _hash = require("../../../lib/hash");

const getById = _run.getRunById;
exports.getById = getById;

const createRun = async params => {
  const runId = (0, _hash.generateRunIdHash)(params);
  const groupId = (0, _hash.generateGroupId)(params.platform, params.ciBuildId);
  const response = {
    groupId,
    machineId: (0, _hash.generateUUID)(),
    runId,
    runUrl: (0, _urls.getDashboardRunURL)(runId),
    warnings: []
  };

  try {
    await (0, _run.createRun)({
      runId,
      createdAt: new Date().toISOString(),
      meta: {
        groupId,
        ciBuildId: params.ciBuildId,
        commit: params.commit,
        projectId: params.projectId,
        platform: params.platform
      },
      specs: params.specs.map(spec => ({
        spec,
        instanceId: (0, _hash.generateUUID)(),
        claimed: false
      }))
    });
    return response;
  } catch (error) {
    if (error.code && error.code === _errors.RUN_EXISTS) {
      return response;
    }

    throw error;
  }
};

exports.createRun = createRun;

const getClaimedSpecs = run => run.specs.filter(s => s.claimed);

const getFirstUnclaimedSpec = run => run.specs.find(s => !s.claimed);

const getAllSpecs = run => run.specs;

const getNextTask = async runId => {
  const run = await getById(runId);

  if (!run) {
    throw new _errors.AppError(_errors.RUN_NOT_EXIST);
  }

  if (!getFirstUnclaimedSpec(run)) {
    return {
      instance: null,
      claimedInstances: getClaimedSpecs(run).length,
      totalInstances: getAllSpecs(run).length
    };
  }

  const spec = getFirstUnclaimedSpec(run);

  try {
    await (0, _run.setSpecClaimed)(runId, spec.instanceId);
    await (0, _instance.createInstance)({
      runId,
      instanceId: spec.instanceId,
      spec: spec.spec
    });
    return {
      instance: spec,
      claimedInstances: getClaimedSpecs(run).length + 1,
      totalInstances: getAllSpecs(run).length
    };
  } catch (error) {
    if (error.code && error.code === _errors.CLAIM_FAILED) {
      return await getNextTask(runId);
    }

    throw error;
  }
};

exports.getNextTask = getNextTask;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9leGVjdXRpb24vbW9uZ28vcnVucy9ydW4uY29udHJvbGxlci50cyJdLCJuYW1lcyI6WyJnZXRCeUlkIiwiZ2V0UnVuQnlJZCIsImNyZWF0ZVJ1biIsInBhcmFtcyIsInJ1bklkIiwiZ3JvdXBJZCIsInBsYXRmb3JtIiwiY2lCdWlsZElkIiwicmVzcG9uc2UiLCJtYWNoaW5lSWQiLCJydW5VcmwiLCJ3YXJuaW5ncyIsImNyZWF0ZWRBdCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsIm1ldGEiLCJjb21taXQiLCJwcm9qZWN0SWQiLCJzcGVjcyIsIm1hcCIsInNwZWMiLCJpbnN0YW5jZUlkIiwiY2xhaW1lZCIsImVycm9yIiwiY29kZSIsIlJVTl9FWElTVFMiLCJnZXRDbGFpbWVkU3BlY3MiLCJydW4iLCJmaWx0ZXIiLCJzIiwiZ2V0Rmlyc3RVbmNsYWltZWRTcGVjIiwiZmluZCIsImdldEFsbFNwZWNzIiwiZ2V0TmV4dFRhc2siLCJBcHBFcnJvciIsIlJVTl9OT1RfRVhJU1QiLCJpbnN0YW5jZSIsImNsYWltZWRJbnN0YW5jZXMiLCJsZW5ndGgiLCJ0b3RhbEluc3RhbmNlcyIsIkNMQUlNX0ZBSUxFRCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQU1BOztBQUNBOztBQUVBOztBQU9BOztBQU9PLE1BQU1BLE9BQU8sR0FBR0MsZUFBaEI7OztBQUVBLE1BQU1DLFNBQVMsR0FBRyxNQUN2QkMsTUFEdUIsSUFFUTtBQUMvQixRQUFNQyxLQUFLLEdBQUcsNkJBQWtCRCxNQUFsQixDQUFkO0FBQ0EsUUFBTUUsT0FBTyxHQUFHLDJCQUFnQkYsTUFBTSxDQUFDRyxRQUF2QixFQUFpQ0gsTUFBTSxDQUFDSSxTQUF4QyxDQUFoQjtBQUVBLFFBQU1DLFFBQVEsR0FBRztBQUNmSCxJQUFBQSxPQURlO0FBRWZJLElBQUFBLFNBQVMsRUFBRSx5QkFGSTtBQUdmTCxJQUFBQSxLQUhlO0FBSWZNLElBQUFBLE1BQU0sRUFBRSw4QkFBbUJOLEtBQW5CLENBSk87QUFLZk8sSUFBQUEsUUFBUSxFQUFFO0FBTEssR0FBakI7O0FBUUEsTUFBSTtBQUNGLFVBQU0sb0JBQWlCO0FBQ3JCUCxNQUFBQSxLQURxQjtBQUVyQlEsTUFBQUEsU0FBUyxFQUFFLElBQUlDLElBQUosR0FBV0MsV0FBWCxFQUZVO0FBR3JCQyxNQUFBQSxJQUFJLEVBQUU7QUFDSlYsUUFBQUEsT0FESTtBQUVKRSxRQUFBQSxTQUFTLEVBQUVKLE1BQU0sQ0FBQ0ksU0FGZDtBQUdKUyxRQUFBQSxNQUFNLEVBQUViLE1BQU0sQ0FBQ2EsTUFIWDtBQUlKQyxRQUFBQSxTQUFTLEVBQUVkLE1BQU0sQ0FBQ2MsU0FKZDtBQUtKWCxRQUFBQSxRQUFRLEVBQUVILE1BQU0sQ0FBQ0c7QUFMYixPQUhlO0FBVXJCWSxNQUFBQSxLQUFLLEVBQUVmLE1BQU0sQ0FBQ2UsS0FBUCxDQUFhQyxHQUFiLENBQWtCQyxJQUFELEtBQVc7QUFDakNBLFFBQUFBLElBRGlDO0FBRWpDQyxRQUFBQSxVQUFVLEVBQUUseUJBRnFCO0FBR2pDQyxRQUFBQSxPQUFPLEVBQUU7QUFId0IsT0FBWCxDQUFqQjtBQVZjLEtBQWpCLENBQU47QUFnQkEsV0FBT2QsUUFBUDtBQUNELEdBbEJELENBa0JFLE9BQU9lLEtBQVAsRUFBYztBQUNkLFFBQUlBLEtBQUssQ0FBQ0MsSUFBTixJQUFjRCxLQUFLLENBQUNDLElBQU4sS0FBZUMsa0JBQWpDLEVBQTZDO0FBQzNDLGFBQU9qQixRQUFQO0FBQ0Q7O0FBQ0QsVUFBTWUsS0FBTjtBQUNEO0FBQ0YsQ0F0Q007Ozs7QUF3Q1AsTUFBTUcsZUFBZSxHQUFJQyxHQUFELElBQWNBLEdBQUcsQ0FBQ1QsS0FBSixDQUFVVSxNQUFWLENBQWtCQyxDQUFELElBQU9BLENBQUMsQ0FBQ1AsT0FBMUIsQ0FBdEM7O0FBQ0EsTUFBTVEscUJBQXFCLEdBQUlILEdBQUQsSUFBY0EsR0FBRyxDQUFDVCxLQUFKLENBQVVhLElBQVYsQ0FBZ0JGLENBQUQsSUFBTyxDQUFDQSxDQUFDLENBQUNQLE9BQXpCLENBQTVDOztBQUNBLE1BQU1VLFdBQVcsR0FBSUwsR0FBRCxJQUFjQSxHQUFHLENBQUNULEtBQXRDOztBQUVPLE1BQU1lLFdBQVcsR0FBRyxNQUFPN0IsS0FBUCxJQUF3QztBQUNqRSxRQUFNdUIsR0FBRyxHQUFHLE1BQU0zQixPQUFPLENBQUNJLEtBQUQsQ0FBekI7O0FBQ0EsTUFBSSxDQUFDdUIsR0FBTCxFQUFVO0FBQ1IsVUFBTSxJQUFJTyxnQkFBSixDQUFhQyxxQkFBYixDQUFOO0FBQ0Q7O0FBQ0QsTUFBSSxDQUFDTCxxQkFBcUIsQ0FBQ0gsR0FBRCxDQUExQixFQUFpQztBQUMvQixXQUFPO0FBQ0xTLE1BQUFBLFFBQVEsRUFBRSxJQURMO0FBRUxDLE1BQUFBLGdCQUFnQixFQUFFWCxlQUFlLENBQUNDLEdBQUQsQ0FBZixDQUFxQlcsTUFGbEM7QUFHTEMsTUFBQUEsY0FBYyxFQUFFUCxXQUFXLENBQUNMLEdBQUQsQ0FBWCxDQUFpQlc7QUFINUIsS0FBUDtBQUtEOztBQUVELFFBQU1sQixJQUFJLEdBQUdVLHFCQUFxQixDQUFDSCxHQUFELENBQWxDOztBQUNBLE1BQUk7QUFDRixVQUFNLHlCQUFldkIsS0FBZixFQUFzQmdCLElBQUksQ0FBQ0MsVUFBM0IsQ0FBTjtBQUNBLFVBQU0sOEJBQWU7QUFDbkJqQixNQUFBQSxLQURtQjtBQUVuQmlCLE1BQUFBLFVBQVUsRUFBRUQsSUFBSSxDQUFDQyxVQUZFO0FBR25CRCxNQUFBQSxJQUFJLEVBQUVBLElBQUksQ0FBQ0E7QUFIUSxLQUFmLENBQU47QUFLQSxXQUFPO0FBQ0xnQixNQUFBQSxRQUFRLEVBQUVoQixJQURMO0FBRUxpQixNQUFBQSxnQkFBZ0IsRUFBRVgsZUFBZSxDQUFDQyxHQUFELENBQWYsQ0FBcUJXLE1BQXJCLEdBQThCLENBRjNDO0FBR0xDLE1BQUFBLGNBQWMsRUFBRVAsV0FBVyxDQUFDTCxHQUFELENBQVgsQ0FBaUJXO0FBSDVCLEtBQVA7QUFLRCxHQVpELENBWUUsT0FBT2YsS0FBUCxFQUFjO0FBQ2QsUUFBSUEsS0FBSyxDQUFDQyxJQUFOLElBQWNELEtBQUssQ0FBQ0MsSUFBTixLQUFlZ0Isb0JBQWpDLEVBQStDO0FBQzdDLGFBQU8sTUFBTVAsV0FBVyxDQUFDN0IsS0FBRCxDQUF4QjtBQUNEOztBQUNELFVBQU1tQixLQUFOO0FBQ0Q7QUFDRixDQWhDTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGdldFJ1bkJ5SWQsXG4gIGNyZWF0ZVJ1biBhcyBzdG9yYWdlQ3JlYXRlUnVuLFxuICBzZXRTcGVjQ2xhaW1lZCxcbn0gZnJvbSAnLi9ydW4ubW9kZWwnO1xuXG5pbXBvcnQgeyBjcmVhdGVJbnN0YW5jZSB9IGZyb20gJy4uL2luc3RhbmNlcy9pbnN0YW5jZS5jb250cm9sbGVyJztcbmltcG9ydCB7IGdldERhc2hib2FyZFJ1blVSTCB9IGZyb20gJ0BzcmMvbGliL3VybHMnO1xuXG5pbXBvcnQge1xuICBBcHBFcnJvcixcbiAgUlVOX0VYSVNUUyxcbiAgUlVOX05PVF9FWElTVCxcbiAgQ0xBSU1fRkFJTEVELFxufSBmcm9tICdAc3JjL2xpYi9lcnJvcnMnO1xuXG5pbXBvcnQge1xuICBnZW5lcmF0ZVJ1bklkSGFzaCxcbiAgZ2VuZXJhdGVHcm91cElkLFxuICBnZW5lcmF0ZVVVSUQsXG59IGZyb20gJ0BzcmMvbGliL2hhc2gnO1xuaW1wb3J0IHsgQ3JlYXRlUnVuUGFyYW1ldGVycywgQ3JlYXRlUnVuUmVzcG9uc2UsIFJ1biwgVGFzayB9IGZyb20gJ0BzcmMvdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgZ2V0QnlJZCA9IGdldFJ1bkJ5SWQ7XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVSdW4gPSBhc3luYyAoXG4gIHBhcmFtczogQ3JlYXRlUnVuUGFyYW1ldGVyc1xuKTogUHJvbWlzZTxDcmVhdGVSdW5SZXNwb25zZT4gPT4ge1xuICBjb25zdCBydW5JZCA9IGdlbmVyYXRlUnVuSWRIYXNoKHBhcmFtcyk7XG4gIGNvbnN0IGdyb3VwSWQgPSBnZW5lcmF0ZUdyb3VwSWQocGFyYW1zLnBsYXRmb3JtLCBwYXJhbXMuY2lCdWlsZElkKTtcblxuICBjb25zdCByZXNwb25zZSA9IHtcbiAgICBncm91cElkLFxuICAgIG1hY2hpbmVJZDogZ2VuZXJhdGVVVUlEKCksXG4gICAgcnVuSWQsXG4gICAgcnVuVXJsOiBnZXREYXNoYm9hcmRSdW5VUkwocnVuSWQpLFxuICAgIHdhcm5pbmdzOiBbXSBhcyBzdHJpbmdbXSxcbiAgfTtcblxuICB0cnkge1xuICAgIGF3YWl0IHN0b3JhZ2VDcmVhdGVSdW4oe1xuICAgICAgcnVuSWQsXG4gICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIG1ldGE6IHtcbiAgICAgICAgZ3JvdXBJZCxcbiAgICAgICAgY2lCdWlsZElkOiBwYXJhbXMuY2lCdWlsZElkLFxuICAgICAgICBjb21taXQ6IHBhcmFtcy5jb21taXQsXG4gICAgICAgIHByb2plY3RJZDogcGFyYW1zLnByb2plY3RJZCxcbiAgICAgICAgcGxhdGZvcm06IHBhcmFtcy5wbGF0Zm9ybSxcbiAgICAgIH0sXG4gICAgICBzcGVjczogcGFyYW1zLnNwZWNzLm1hcCgoc3BlYykgPT4gKHtcbiAgICAgICAgc3BlYyxcbiAgICAgICAgaW5zdGFuY2VJZDogZ2VuZXJhdGVVVUlEKCksXG4gICAgICAgIGNsYWltZWQ6IGZhbHNlLFxuICAgICAgfSkpLFxuICAgIH0pO1xuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAoZXJyb3IuY29kZSAmJiBlcnJvci5jb2RlID09PSBSVU5fRVhJU1RTKSB7XG4gICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfVxuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuXG5jb25zdCBnZXRDbGFpbWVkU3BlY3MgPSAocnVuOiBSdW4pID0+IHJ1bi5zcGVjcy5maWx0ZXIoKHMpID0+IHMuY2xhaW1lZCk7XG5jb25zdCBnZXRGaXJzdFVuY2xhaW1lZFNwZWMgPSAocnVuOiBSdW4pID0+IHJ1bi5zcGVjcy5maW5kKChzKSA9PiAhcy5jbGFpbWVkKTtcbmNvbnN0IGdldEFsbFNwZWNzID0gKHJ1bjogUnVuKSA9PiBydW4uc3BlY3M7XG5cbmV4cG9ydCBjb25zdCBnZXROZXh0VGFzayA9IGFzeW5jIChydW5JZDogc3RyaW5nKTogUHJvbWlzZTxUYXNrPiA9PiB7XG4gIGNvbnN0IHJ1biA9IGF3YWl0IGdldEJ5SWQocnVuSWQpO1xuICBpZiAoIXJ1bikge1xuICAgIHRocm93IG5ldyBBcHBFcnJvcihSVU5fTk9UX0VYSVNUKTtcbiAgfVxuICBpZiAoIWdldEZpcnN0VW5jbGFpbWVkU3BlYyhydW4pKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGluc3RhbmNlOiBudWxsLFxuICAgICAgY2xhaW1lZEluc3RhbmNlczogZ2V0Q2xhaW1lZFNwZWNzKHJ1bikubGVuZ3RoLFxuICAgICAgdG90YWxJbnN0YW5jZXM6IGdldEFsbFNwZWNzKHJ1bikubGVuZ3RoLFxuICAgIH07XG4gIH1cblxuICBjb25zdCBzcGVjID0gZ2V0Rmlyc3RVbmNsYWltZWRTcGVjKHJ1bik7XG4gIHRyeSB7XG4gICAgYXdhaXQgc2V0U3BlY0NsYWltZWQocnVuSWQsIHNwZWMuaW5zdGFuY2VJZCk7XG4gICAgYXdhaXQgY3JlYXRlSW5zdGFuY2Uoe1xuICAgICAgcnVuSWQsXG4gICAgICBpbnN0YW5jZUlkOiBzcGVjLmluc3RhbmNlSWQsXG4gICAgICBzcGVjOiBzcGVjLnNwZWMsXG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGluc3RhbmNlOiBzcGVjLFxuICAgICAgY2xhaW1lZEluc3RhbmNlczogZ2V0Q2xhaW1lZFNwZWNzKHJ1bikubGVuZ3RoICsgMSxcbiAgICAgIHRvdGFsSW5zdGFuY2VzOiBnZXRBbGxTcGVjcyhydW4pLmxlbmd0aCxcbiAgICB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmIChlcnJvci5jb2RlICYmIGVycm9yLmNvZGUgPT09IENMQUlNX0ZBSUxFRCkge1xuICAgICAgcmV0dXJuIGF3YWl0IGdldE5leHRUYXNrKHJ1bklkKTtcbiAgICB9XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG4iXX0=