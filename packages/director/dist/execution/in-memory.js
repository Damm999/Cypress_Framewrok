"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.driver = void 0;

var _urls = require("../lib/urls");

var _errors = require("../lib/errors");

var _hash = require("../lib/hash");

const runs = {};
const instances = {};

const createRun = async params => {
  const runId = (0, _hash.generateRunIdHash)(params);
  const groupId = (0, _hash.generateGroupId)(params.platform, params.ciBuildId);
  const response = {
    groupId,
    machineId: (0, _hash.generateUUID)(),
    runId,
    runUrl: (0, _urls.getDashboardRunURL)(runId),
    warnings: []
  };

  if (runs[runId]) {
    return response;
  }

  runs[runId] = {
    runId,
    createdAt: new Date().toUTCString(),
    meta: {},
    specs: params.specs.map(spec => ({
      spec,
      instanceId: (0, _hash.generateUUID)(),
      claimed: false
    }))
  };
  return response;
};

const getNextTask = async runId => {
  if (!runs[runId]) {
    throw new _errors.AppError(_errors.RUN_NOT_EXIST);
  }

  const unclaimedSpecIndex = runs[runId].specs.findIndex(s => !s.claimed);

  if (unclaimedSpecIndex === -1) {
    return {
      instance: null,
      claimedInstances: runs[runId].specs.length,
      totalInstances: runs[runId].specs.length
    };
  }

  const spec = runs[runId].specs[unclaimedSpecIndex];
  spec.claimed = true;
  instances[spec.instanceId] = {
    runId
  };
  return {
    instance: runs[runId].specs[unclaimedSpecIndex],
    claimedInstances: runs[runId].specs.filter(s => s.claimed).length,
    totalInstances: runs[runId].specs.length
  };
};

const setInstanceResults = async (instanceId, results) => {
  if (!instances[instanceId]) {
    throw new _errors.AppError(_errors.INSTANCE_NOT_EXIST);
  }

  instances[instanceId] = { ...instances[instanceId],
    results
  };
};

const driver = {
  id: 'in-memory',
  init: () => Promise.resolve(),
  setScreenshotUrl: () => Promise.resolve(),
  setVideoUrl: () => Promise.resolve(),
  createRun,
  getNextTask,
  setInstanceResults
};
exports.driver = driver;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leGVjdXRpb24vaW4tbWVtb3J5LnRzIl0sIm5hbWVzIjpbInJ1bnMiLCJpbnN0YW5jZXMiLCJjcmVhdGVSdW4iLCJwYXJhbXMiLCJydW5JZCIsImdyb3VwSWQiLCJwbGF0Zm9ybSIsImNpQnVpbGRJZCIsInJlc3BvbnNlIiwibWFjaGluZUlkIiwicnVuVXJsIiwid2FybmluZ3MiLCJjcmVhdGVkQXQiLCJEYXRlIiwidG9VVENTdHJpbmciLCJtZXRhIiwic3BlY3MiLCJtYXAiLCJzcGVjIiwiaW5zdGFuY2VJZCIsImNsYWltZWQiLCJnZXROZXh0VGFzayIsIkFwcEVycm9yIiwiUlVOX05PVF9FWElTVCIsInVuY2xhaW1lZFNwZWNJbmRleCIsImZpbmRJbmRleCIsInMiLCJpbnN0YW5jZSIsImNsYWltZWRJbnN0YW5jZXMiLCJsZW5ndGgiLCJ0b3RhbEluc3RhbmNlcyIsImZpbHRlciIsInNldEluc3RhbmNlUmVzdWx0cyIsInJlc3VsdHMiLCJJTlNUQU5DRV9OT1RfRVhJU1QiLCJkcml2ZXIiLCJpZCIsImluaXQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFNjcmVlbnNob3RVcmwiLCJzZXRWaWRlb1VybCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVNBOztBQUNBOztBQUNBOztBQU1BLE1BQU1BLElBQTRCLEdBQUcsRUFBckM7QUFDQSxNQUFNQyxTQUtMLEdBQUcsRUFMSjs7QUFPQSxNQUFNQyxTQUFTLEdBQUcsTUFDaEJDLE1BRGdCLElBRWU7QUFDL0IsUUFBTUMsS0FBSyxHQUFHLDZCQUFrQkQsTUFBbEIsQ0FBZDtBQUNBLFFBQU1FLE9BQU8sR0FBRywyQkFBZ0JGLE1BQU0sQ0FBQ0csUUFBdkIsRUFBaUNILE1BQU0sQ0FBQ0ksU0FBeEMsQ0FBaEI7QUFFQSxRQUFNQyxRQUFRLEdBQUc7QUFDZkgsSUFBQUEsT0FEZTtBQUVmSSxJQUFBQSxTQUFTLEVBQUUseUJBRkk7QUFHZkwsSUFBQUEsS0FIZTtBQUlmTSxJQUFBQSxNQUFNLEVBQUUs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RUFIYTtBQUlyQ0UsRUFBQUEsV0FBVyxFQUFFLE1BQU1ILE9BQU8sQ0FBQ0MsT0FBUixFQUprQjtBQUtyQ3JDLEVBQUFBLFNBTHFDO0FBTXJDbUIsRUFBQUEsV0FOcUM7QUFPckNXLEVBQUFBO0FBUHFDLENBQWhDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgUnVuLFxuICBUYXNrLFxuICBSdW5NZXRhRGF0YSxcbiAgSW5zdGFuY2VSZXN1bHQsXG4gIEV4ZWN1dGlvbkRyaXZlcixcbiAgQ3JlYXRlUnVuUmVzcG9uc2UsXG4gIENyZWF0ZVJ1blBhcmFtZXRlcnMsXG59IGZyb20gJ0BzcmMvdHlwZXMnO1xuaW1wb3J0IHsgZ2V0RGFzaGJvYXJkUnVuVVJMIH0gZnJvbSAnQHNyYy9saWIvdXJscyc7XG5pbXBvcnQgeyBBcHBFcnJvciwgUlVOX05PVF9FWElTVCwgSU5TVEFOQ0VfTk9UX0VYSVNUIH0gZnJvbSAnQHNyYy9saWIvZXJyb3JzJztcbmltcG9ydCB7XG4gIGdlbmVyYXRlUnVuSWRIYXNoLFxuICBnZW5lcmF0ZUdyb3VwSWQsXG4gIGdlbmVyYXRlVVVJRCxcbn0gZnJvbSAnQHNyYy9saWIvaGFzaCc7XG5cbmNvbnN0IHJ1bnM6IHsgW2tleTogc3RyaW5nXTogUnVuIH0gPSB7fTtcbmNvbnN0IGluc3RhbmNlczoge1xuICBba2V5OiBzdHJpbmddOiB7XG4gICAgcnVuSWQ6IHN0cmluZztcbiAgICByZXN1bHRzPzogSW5zdGFuY2VSZXN1bHQ7XG4gIH07XG59ID0ge307XG5cbmNvbnN0IGNyZWF0ZVJ1biA9IGFzeW5jIChcbiAgcGFyYW1zOiBDcmVhdGVSdW5QYXJhbWV0ZXJzXG4pOiBQcm9taXNlPENyZWF0ZVJ1blJlc3BvbnNlPiA9PiB7XG4gIGNvbnN0IHJ1bklkID0gZ2VuZXJhdGVSdW5JZEhhc2gocGFyYW1zKTtcbiAgY29uc3QgZ3JvdXBJZCA9IGdlbmVyYXRlR3JvdXBJZChwYXJhbXMucGxhdGZvcm0sIHBhcmFtcy5jaUJ1aWxkSWQpO1xuXG4gIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgIGdyb3VwSWQsXG4gICAgbWFjaGluZUlkOiBnZW5lcmF0ZVVVSUQoKSxcbiAgICBydW5JZCxcbiAgICBydW5Vcmw6IGdldERhc2hib2FyZFJ1blVSTChydW5JZCksXG4gICAgd2FybmluZ3M6IFtdIGFzIHN0cmluZ1tdLFxuICB9O1xuXG4gIGlmIChydW5zW3J1bklkXSkge1xuICAgIHJldHVybiByZXNwb25zZTtcbiAgfVxuXG4gIHJ1bnNbcnVuSWRdID0ge1xuICAgIHJ1bklkLFxuICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKS50b1VUQ1N0cmluZygpLFxuICAgIG1ldGE6IHt9IGFzIFJ1bk1ldGFEYXRhLFxuICAgIHNwZWNzOiBwYXJhbXMuc3BlY3MubWFwKChzcGVjKSA9PiAoe1xuICAgICAgc3BlYyxcbiAgICAgIGluc3RhbmNlSWQ6IGdlbmVyYXRlVVVJRCgpLFxuICAgICAgY2xhaW1lZDogZmFsc2UsXG4gICAgfSkpLFxuICB9O1xuXG4gIHJldHVybiByZXNwb25zZTtcbn07XG5cbmNvbnN0IGdldE5leHRUYXNrID0gYXN5bmMgKHJ1bklkOiBzdHJpbmcpOiBQcm9taXNlPFRhc2s+ID0+IHtcbiAgaWYgKCFydW5zW3J1bklkXSkge1xuICAgIHRocm93IG5ldyBBcHBFcnJvcihSVU5fTk9UX0VYSVNUKTtcbiAgfVxuXG4gIGNvbnN0IHVuY2xhaW1lZFNwZWNJbmRleCA9IHJ1bnNbcnVuSWRdLnNwZWNzLmZpbmRJbmRleCgocykgPT4gIXMuY2xhaW1lZCk7XG4gIGlmICh1bmNsYWltZWRTcGVjSW5kZXggPT09IC0xKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGluc3RhbmNlOiBudWxsLFxuICAgICAgY2xhaW1lZEluc3RhbmNlczogcnVuc1tydW5JZF0uc3BlY3MubGVuZ3RoLFxuICAgICAgdG90YWxJbnN0YW5jZXM6IHJ1bnNbcnVuSWRdLnNwZWNzLmxlbmd0aCxcbiAgICB9O1xuICB9XG5cbiAgY29uc3Qgc3BlYyA9IHJ1bnNbcnVuSWRdLnNwZWNzW3VuY2xhaW1lZFNwZWNJbmRleF07XG5cbiAgc3BlYy5jbGFpbWVkID0gdHJ1ZTtcbiAgaW5zdGFuY2VzW3NwZWMuaW5zdGFuY2VJZF0gPSB7IHJ1bklkIH07XG5cbiAgcmV0dXJuIHtcbiAgICBpbnN0YW5jZTogcnVuc1tydW5JZF0uc3BlY3NbdW5jbGFpbWVkU3BlY0luZGV4XSxcbiAgICBjbGFpbWVkSW5zdGFuY2VzOiBydW5zW3J1bklkXS5zcGVjcy5maWx0ZXIoKHMpID0+IHMuY2xhaW1lZCkubGVuZ3RoLFxuICAgIHRvdGFsSW5zdGFuY2VzOiBydW5zW3J1bklkXS5zcGVjcy5sZW5ndGgsXG4gIH07XG59O1xuXG5jb25zdCBzZXRJbnN0YW5jZVJlc3VsdHMgPSBhc3luYyAoXG4gIGluc3RhbmNlSWQ6IHN0cmluZyxcbiAgcmVzdWx0czogSW5zdGFuY2VSZXN1bHRcbikgPT4ge1xuICBpZiAoIWluc3RhbmNlc1tpbnN0YW5jZUlkXSkge1xuICAgIHRocm93IG5ldyBBcHBFcnJvcihJTlNUQU5DRV9OT1RfRVhJU1QpO1xuICB9XG4gIGluc3RhbmNlc1tpbnN0YW5jZUlkXSA9IHsgLi4uaW5zdGFuY2VzW2luc3RhbmNlSWRdLCByZXN1bHRzIH07XG59O1xuZXhwb3J0IGNvbnN0IGRyaXZlcjogRXhlY3V0aW9uRHJpdmVyID0ge1xuICBpZDogJ2luLW1lbW9yeScsXG4gIGluaXQ6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLFxuICBzZXRTY3JlZW5zaG90VXJsOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoKSxcbiAgc2V0VmlkZW9Vcmw6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLFxuICBjcmVhdGVSdW4sXG4gIGdldE5leHRUYXNrLFxuICBzZXRJbnN0YW5jZVJlc3VsdHMsXG59O1xuIl19