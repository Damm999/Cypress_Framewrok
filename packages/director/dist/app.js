"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.app = void 0;

var _express = _interopRequireDefault(require("express"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _config = require("./config");

var _errors = require("./lib/errors");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const app = (0, _express.default)();
exports.app = app;

const isKeyAllowed = recordKey => _config.ALLOWED_KEYS ? _config.ALLOWED_KEYS.includes(recordKey) : true;

app.use(_bodyParser.default.json({
  limit: '50mb'
}));
app.get('/', (_, res) => res.redirect('https://github.com/agoldis/sorry-cypress'));
app.post('/runs', async (req, res) => {
  const {
    recordKey,
    ciBuildId
  } = req.body;
  console.log(`>> Machine is asking to join a run`, {
    recordKey,
    ciBuildId
  });

  if (!isKeyAllowed(recordKey)) {
    console.log(`<< Record key is not allowed`, {
      recordKey
    });
    return res.status(403).send(`Provided record key '${recordKey}' is not allowed`);
  }

  console.log(`>> Machine is joining a run`, {
    ciBuildId
  });
  const response = await app.get('executionDriver').createRun(req.body);
  console.log(`<< Responding to machine`, response);
  return res.json(response);
});
app.post('/runs/:runId/instances', async (req, res) => {
  const {
    groupId,
    machineId
  } = req.body;
  const {
    runId
  } = req.params;
  console.log(`>> Machine is requesting a new task`, {
    runId,
    machineId,
    groupId
  });

  try {
    const {
      instance,
      claimedInstances,
      totalInstances
    } = await app.get('executionDriver').getNextTask(runId);

    if (instance === null) {
      console.log(`<< All tasks claimed`, {
        runId,
        machineId
      });
      return res.json({
        spec: null,
        instanceId: null,
        claimedInstances,
        totalInstances
      });
    }

    console.log(`<< Sending new task to machine`, instance);
    return res.json({
      spec: instance.spec,
      instanceId: instance.instanceId,
      claimedInstances,
      totalInstances
    });
  } catch (error) {
    if (error.code && error.code === _errors.RUN_NOT_EXIST) {
      return res.sendStatus(404);
    }

    throw error;
  }
});
app.put('/instances/:instanceId', async (req, res) => {
  const {
    instanceId
  } = req.params;
  const result = req.body;
  const executionDriver = app.get('executionDriver');
  const screenshotsDriver = app.get('screenshotsDriver');
  console.log(`>> Received instance result`, {
    instanceId
  });
  await executionDriver.setInstanceResults(instanceId, result);
  const screenshotUploadUrls = await screenshotsDriver.getScreenshotsUploadUrls(instanceId, result);
  const videoUploadInstructions = await screenshotsDriver.getVideoUploadUrl(instanceId, result);

  if (screenshotUploadUrls.length > 0) {
    screenshotUploadUrls.forEach(screenshot => {
      executionDriver.setScreenshotUrl(instanceId, screenshot.screenshotId, screenshot.readUrl);
    });
  }

  if (videoUploadInstructions) {
    executionDriver.setVideoUrl({
      instanceId,
      videoUrl: videoUploadInstructions.readUrl
    });
  }

  console.log(`<< Sending assets upload URLs`, {
    instanceId,
    screenshotUploadUrls,
    videoUploadInstructions
  });
  const responsePayload = {
    screenshotUploadUrls
  };

  if (videoUploadInstructions) {
    responsePayload.videoUploadUrl = videoUploadInstructions.uploadUrl;
  }

  return res.json(responsePayload);
});
/*
4. PUT https://api.cypress.io/instances/<instanceId>/stdout
>> response 'OK'
*/

app.put('/instances/:instanceId/stdout', (req, res) => {
  const {
    instanceId
  } = req.params;
  console.log(`>> [not implemented] Received stdout for instance`, {
    instanceId
  });
  return res.sendStatus(200);
});
app.get('/ping', (_, res) => {
  res.send(`${Date.now()}: sorry-cypress-director is live`);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,